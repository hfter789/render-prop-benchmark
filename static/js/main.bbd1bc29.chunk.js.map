{"version":3,"sources":["components/ComponentCounterContainer.js","components/RenderPropCounterContainer.js","components/FancyCounter.js","App.js","serviceWorker.js","index.js"],"names":["ComponentCounterContainer","state","count","handleIncrement","_this","setState","handleDecrement","Counter","this","props","react_default","a","createElement","onIncrement","onDecrement","React","Component","RenderPropsCounterContainer","renderCounter","FancyCounter","onMount","_this$props","color","style","backgroundColor","onClick","numberOfComponentMounts","numberOfRenderPropMounts","App","toggleColor","handleComponentMount","handleRenderPropMount","_this2","className","ComponentCounterContainer_ComponentCounterContainer","_ref","FancyCounter_FancyCounter","RenderPropCounterContainer_RenderPropsCounterContainer","_ref2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbd1bc29.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class ComponentCounterContainer extends React.Component {\n  state = {\n    count: 0\n  };\n\n  handleIncrement = () => {\n    this.setState(state => ({\n      count: state.count + 1\n    }));\n  };\n\n  handleDecrement = () => {\n    this.setState(state => ({\n      count: state.count - 1\n    }));\n  };\n\n  render() {\n    const { Counter } = this.props;\n    const { count } = this.state;\n    return (\n      <Counter\n        count={count}\n        onIncrement={this.handleIncrement}\n        onDecrement={this.handleDecrement}\n      />\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class RenderPropsCounterContainer extends React.Component {\n  state = {\n    count: 0\n  };\n\n  handleIncrement = () => {\n    this.setState(state => ({\n      count: state.count + 1\n    }));\n  };\n\n  handleDecrement = () => {\n    this.setState(state => ({\n      count: state.count - 1\n    }));\n  };\n\n  render() {\n    const { renderCounter } = this.props;\n    const { count } = this.state;\n    return renderCounter({\n      count,\n      onIncrement: this.handleIncrement,\n      onDecrement: this.handleDecrement\n    });\n  }\n}\n","import React from 'react';\n\nexport default class FancyCounter extends React.Component {\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    const { count, onIncrement, onDecrement, color } = this.props;\n    return (\n      <div>\n        <p>{count}</p>\n        <button style={{ backgroundColor: color }} onClick={onIncrement}>+</button>\n        <button style={{ backgroundColor: color }} onClick={onDecrement}>-</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport ComponentCounterContainer from \"./components/ComponentCounterContainer\";\nimport RenderPropCounterContainer from \"./components/RenderPropCounterContainer\";\nimport FancyCounter from \"./components/FancyCounter\";\n\n/*\n * NOTE: This can't be stored in React state because it would\n * cause an infinite render loop of the ComponentCounterContainer's\n * FancyCounter.\n * \n * Because of this, the displayed mount count will always be 1 render\n * cycle behind the actual number.\n */\nlet numberOfComponentMounts = 0;\nlet numberOfRenderPropMounts = 0;\n\nclass App extends Component {\n  state = {\n    color: \"red\"\n  };\n\n  toggleColor = () => {\n    this.setState(state => ({\n      color: state.color === \"red\" ? \"green\" : \"red\"\n    }));\n  };\n\n  handleComponentMount = () => {\n    numberOfComponentMounts++;\n  };\n\n  handleRenderPropMount = () => {\n    numberOfRenderPropMounts++;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Render Prop Benchmark</h1>\n        <p>\n          This is a very simple benchmark that shows how many times the counter\n          component is mounted for each approach.\n        </p>\n        <p>Click the button to change the color and trigger a re-render</p>\n        <div>\n          <button onClick={this.toggleColor}>Change Color</button>\n        </div>\n\n        <table>\n          <thead>\n            <tr>\n              <th>Type</th>\n              <th>Component Prop</th>\n              <th>Render Prop</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>Number of mounts</th>\n              <td>{numberOfComponentMounts}</td>\n              <td>{numberOfRenderPropMounts}</td>\n            </tr>\n            <tr>\n              <th>Rendered</th>\n              <td>\n                <ComponentCounterContainer\n                  Counter={({ count, onIncrement, onDecrement }) => (\n                    <FancyCounter\n                      count={count}\n                      onIncrement={onIncrement}\n                      onDecrement={onDecrement}\n                      color={this.state.color}\n                      onMount={this.handleComponentMount}\n                    />\n                  )}\n                />\n              </td>\n              <td>\n                <RenderPropCounterContainer\n                  renderCounter={({ count, onIncrement, onDecrement }) => (\n                    <FancyCounter\n                      count={count}\n                      onIncrement={onIncrement}\n                      onDecrement={onDecrement}\n                      color={this.state.color}\n                      onMount={this.handleRenderPropMount}\n                    />\n                  )}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}